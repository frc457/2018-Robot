plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.07"
}

// Local dependencies
ext.libs = "$projectDir/libs"
ext.compileLib = "${libs}/compile"
ext.runtimeLib = "${libs}/runtime"

// GradleRIO variables
def TEAM = 457
def ROBOT_CLASS = "frc.team0000.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    if (gradle.startParameter.isOffline()) {
        compile fileTree(dir: compileLib)
    } else {
        compile wpilib()
        compile ctre()
        compile navx()
        compile openrio.powerup.matchData()

        testCompile wpilib()
        testCompile ctre()
        testCompile navx()
        testCompile openrio.powerup.matchData()
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

task deleteLibs(type: Delete) {
    delete 'libs/compile'
    delete 'libs/runtime'
    delete 'libs/testCompile'
    delete 'libs/testRuntime'
}

task copyToLibs(dependsOn: 'deleteLibs') << {
    ['compile', 'runtime', 'testCompile', 'testRuntime'].each { scope ->
        copy {
            from configurations.getByName(scope).files
            into "${libs}/${scope}"
        }
    }
}